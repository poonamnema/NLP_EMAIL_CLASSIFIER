# -*- coding: utf-8 -*-
"""NLP_EMAIL_CLASSIFIER

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hhIAZUeIRTCx5t1G3dPhkUA-W9X6Xv5y
"""

from google.colab import drive
drive.mount('/content/gdrive')

dataset_path ="/content/gdrive/MyDrive/SPAM text message 20170820 - Data.csv"

import pandas as pd
df = pd.read_csv(dataset_path,encoding ="latin-1")
df.head()

# Data Prepossing

## check for null value
df.isnull().sum()

df.Category.value_counts()

## Encoding
df["Category"] = df["Category"].map({"ham":0,"spam":1})
df.head()

#CountVectorizer()

df.Category.value_counts()
from sklearn.feature_extraction.text import CountVectorizer
count_vector = CountVectorizer()
documents = ['Hello, how are you!', 'Win money, win from home.', 'Call me now.', 'Hello, Call hello you tomorrow?']

count_vector.fit(documents)
print("Feature of documents",count_vector.get_feature_names_out())

doc_array = count_vector.transform(documents).toarray()
print("Frequency of features\n",doc_array)

feature_Freq= pd.DataFrame(doc_array,columns=count_vector.get_feature_names_out())
feature_Freq

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(df["Message"],df["Category"],test_size=0.2,random_state=10)

count_vector = CountVectorizer()

training_data = count_vector.fit_transform(x_train).toarray()

testing_data = count_vector.transform(x_test).toarray()

training_data

x_train

y_train

df_transformed = pd.DataFrame(training_data, columns = count_vector.get_feature_names_out())
df_transformed.head()

from sklearn.naive_bayes import MultinomialNB
naive_bayes =  MultinomialNB()
naive_bayes.fit(training_data,y_train)

predictions = naive_bayes.predict(testing_data)

## Compare result
result=pd.DataFrame({"Actual":y_test,"Predicted":predictions})
result

from sklearn.metrics import accuracy_score, precision_score,recall_score, f1_score
print("Accuracy score = {}".format(accuracy_score(y_test,predictions)))

print("Precision score = {}".format(precision_score(y_test,predictions)))

print("Recall score = {}".format(recall_score(y_test,predictions)))

print("F1 score = {}".format(f1_score(y_test,predictions)))

import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay
cm = confusion_matrix(y_test, predictions, labels=naive_bayes.classes_)
disp = ConfusionMatrixDisplay(confusion_matrix=cm,display_labels=naive_bayes.classes_)
disp.plot()
plt.show()

